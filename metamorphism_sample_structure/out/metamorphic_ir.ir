; ModuleID = '/home/kali/Desktop/maldev/metamorphism_sample_structure/build/out/main_pass.bc'
source_filename = "llvm-link"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-w64-windows-gnu"

%struct._IMAGE_DOS_HEADER = type { i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, [4 x i16], i16, i16, [10 x i16], i32 }
%struct._IMAGE_NT_HEADERS64 = type { i32, %struct._IMAGE_FILE_HEADER, %struct._IMAGE_OPTIONAL_HEADER64 }
%struct._IMAGE_FILE_HEADER = type { i16, i16, i32, i32, i32, i16, i16 }
%struct._IMAGE_OPTIONAL_HEADER64 = type { i16, i8, i8, i32, i32, i32, i32, i32, i64, i32, i32, i16, i16, i16, i16, i16, i16, i32, i32, i32, i32, i16, i16, i64, i64, i64, i64, i32, i32, [16 x %struct._IMAGE_DATA_DIRECTORY] }
%struct._IMAGE_DATA_DIRECTORY = type { i32, i32 }
%struct._IMAGE_SECTION_HEADER = type { [8 x i8], %union.anon, i32, i32, i32, i32, i32, i16, i16, i32 }
%union.anon = type { i32 }

@.str = private unnamed_addr constant [19 x i8] c"Adjacency Matrix:\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"Queue allocation failed\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"r+b\00", align 1
@.str.1.5 = private unnamed_addr constant [19 x i8] c"Error opening file\00", align 1
@.str.2.6 = private unnamed_addr constant [24 x i8] c"Error seeking to offset\00", align 1
@.str.3.7 = private unnamed_addr constant [19 x i8] c"Error writing data\00", align 1
@.str.4.8 = private unnamed_addr constant [37 x i8] c"Error: Unable to get module handle.\0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"Section headers:\0A\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"Name: %.8s\0A\00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"Virtual Address: 0x%lX\0A\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"Size of Raw Data: 0x%lX\0A\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c"Pointer to Raw Data: 0x%lX\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"Base Address: 0x%llX\0A\00", align 1
@.str.11 = private unnamed_addr constant [30 x i8] c"DOS Header starting at: 0x%p\0A\00", align 1
@.str.12 = private unnamed_addr constant [29 x i8] c"NT Header starting at: 0x%p\0A\00", align 1
@.str.13 = private unnamed_addr constant [38 x i8] c"NT Optional Header starting at: 0x%p\0A\00", align 1
@.str.14 = private unnamed_addr constant [50 x i8] c"NT Optional Header Image Base address at: 0x%llx\0A\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c".text\00", align 1
@.str.16 = private unnamed_addr constant [33 x i8] c"Error: .text section not found.\0A\00", align 1
@.str.17 = private unnamed_addr constant [47 x i8] c"Text Section Address: 0x%llX, Size: %lX bytes\0A\00", align 1
@.str.18 = private unnamed_addr constant [28 x i8] c"Testing Rva2Offset: 0x%llX\0A\00", align 1
@.str.19 = private unnamed_addr constant [26 x i8] c"Checking current Handle:\0A\00", align 1
@.str.1.21 = private unnamed_addr constant [17 x i8] c"Checking Nodes:\0A\00", align 1
@.str.2.22 = private unnamed_addr constant [50 x i8] c"Executing graph from Node 0 with max depth of 3:\0A\00", align 1
@llvm.global.annotations = appending global [9 x { ptr, ptr, ptr, i32, ptr }] [{ ptr, ptr, ptr, i32, ptr } { ptr @node_0, ptr @.str.1.39, ptr @.str.2.40, i32 14, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_1, ptr @.str.1.39, ptr @.str.2.40, i32 19, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_2, ptr @.str.1.39, ptr @.str.2.40, i32 24, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_3, ptr @.str.1.39, ptr @.str.2.40, i32 29, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_4, ptr @.str.1.39, ptr @.str.2.40, i32 34, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_5, ptr @.str.1.39, ptr @.str.2.40, i32 39, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_6, ptr @.str.1.39, ptr @.str.2.40, i32 44, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_7, ptr @.str.1.39, ptr @.str.2.40, i32 49, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_8, ptr @.str.1.39, ptr @.str.2.40, i32 54, ptr null }], section "llvm.metadata"
@adj_table = dso_local global [9 x [9 x i32]] zeroinitializer, align 16
@node_count = dso_local global i32 9, align 4
@.str.38 = private unnamed_addr constant [20 x i8] c"Hello from Node 0!\0A\00", align 1
@.str.1.39 = private unnamed_addr constant [8 x i8] c"encrypt\00", section "llvm.metadata"
@.str.2.40 = private unnamed_addr constant [83 x i8] c"/home/kali/Desktop/maldev/metamorphism_sample_structure/src/data/adjacency_table.c\00", section "llvm.metadata"
@.str.3.37 = private unnamed_addr constant [20 x i8] c"Hello from Node 1!\0A\00", align 1
@.str.4.36 = private unnamed_addr constant [20 x i8] c"Hello from Node 2!\0A\00", align 1
@.str.5.35 = private unnamed_addr constant [20 x i8] c"Hello from Node 3!\0A\00", align 1
@.str.6.34 = private unnamed_addr constant [20 x i8] c"Hello from Node 4!\0A\00", align 1
@.str.7.33 = private unnamed_addr constant [20 x i8] c"Hello from Node 5!\0A\00", align 1
@.str.8.32 = private unnamed_addr constant [20 x i8] c"Hello from Node 6!\0A\00", align 1
@.str.9.31 = private unnamed_addr constant [20 x i8] c"Hello from Node 7!\0A\00", align 1
@.str.10.29 = private unnamed_addr constant [20 x i8] c"Hello from Node 8!\0A\00", align 1
@nodes = dso_local global [9 x ptr] [ptr @node_0, ptr @node_1, ptr @node_2, ptr @node_3, ptr @node_4, ptr @node_5, ptr @node_6, ptr @node_7, ptr @node_8], align 16
@prng_seed = dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @reorder_edges(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca [9 x i32], align 16
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store ptr %0, ptr %2, align 8
  %7 = load i32, ptr @prng_seed, align 4
  call void @srand(i32 noundef %7)
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 0, i64 36, i1 false)
  store i32 1, ptr %4, align 4
  %8 = getelementptr inbounds [9 x i32], ptr %3, i64 0, i64 0
  store i32 1, ptr %8, align 16
  br label %9

9:                                                ; preds = %41, %1
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr @node_count, align 4
  %12 = icmp slt i32 %10, %11
  br i1 %12, label %13, label %54

13:                                               ; preds = %9
  %14 = call i32 @rand()
  %15 = load i32, ptr @node_count, align 4
  %16 = srem i32 %14, %15
  store i32 %16, ptr %5, align 4
  br label %17

17:                                               ; preds = %23, %13
  %18 = load i32, ptr %5, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [9 x i32], ptr %3, i64 0, i64 %19
  %21 = load i32, ptr %20, align 4
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %27

23:                                               ; preds = %17
  %24 = call i32 @rand()
  %25 = load i32, ptr @node_count, align 4
  %26 = srem i32 %24, %25
  store i32 %26, ptr %5, align 4
  br label %17, !llvm.loop !4

27:                                               ; preds = %17
  %28 = call i32 @rand()
  %29 = load i32, ptr @node_count, align 4
  %30 = srem i32 %28, %29
  store i32 %30, ptr %6, align 4
  br label %31

31:                                               ; preds = %37, %27
  %32 = load i32, ptr %6, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [9 x i32], ptr %3, i64 0, i64 %33
  %35 = load i32, ptr %34, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %31
  %38 = call i32 @rand()
  %39 = load i32, ptr @node_count, align 4
  %40 = srem i32 %38, %39
  store i32 %40, ptr %6, align 4
  br label %31, !llvm.loop !6

41:                                               ; preds = %31
  %42 = load ptr, ptr %2, align 8
  %43 = load i32, ptr %6, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [9 x [9 x i32]], ptr %42, i64 0, i64 %44
  %46 = load i32, ptr %5, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [9 x i32], ptr %45, i64 0, i64 %47
  store i32 1, ptr %48, align 4
  %49 = load i32, ptr %5, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [9 x i32], ptr %3, i64 0, i64 %50
  store i32 1, ptr %51, align 4
  %52 = load i32, ptr %4, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, ptr %4, align 4
  br label %9, !llvm.loop !7

54:                                               ; preds = %9
  ret void
}

declare dso_local void @srand(i32 noundef) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @rand() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_adj_table(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store ptr %0, ptr %2, align 8
  %5 = call i32 (ptr, ...) @printf(ptr noundef @.str)
  store i32 0, ptr %3, align 4
  br label %6

6:                                                ; preds = %30, %1
  %7 = load i32, ptr %3, align 4
  %8 = load i32, ptr @node_count, align 4
  %9 = icmp slt i32 %7, %8
  br i1 %9, label %10, label %33

10:                                               ; preds = %6
  store i32 0, ptr %4, align 4
  br label %11

11:                                               ; preds = %25, %10
  %12 = load i32, ptr %4, align 4
  %13 = load i32, ptr @node_count, align 4
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %15, label %28

15:                                               ; preds = %11
  %16 = load ptr, ptr %2, align 8
  %17 = load i32, ptr %3, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [9 x i32], ptr %16, i64 %18
  %20 = load i32, ptr %4, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [9 x i32], ptr %19, i64 0, i64 %21
  %23 = load i32, ptr %22, align 4
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef %23)
  br label %25

25:                                               ; preds = %15
  %26 = load i32, ptr %4, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, ptr %4, align 4
  br label %11, !llvm.loop !8

28:                                               ; preds = %11
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.2)
  br label %30

30:                                               ; preds = %28
  %31 = load i32, ptr %3, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, ptr %3, align 4
  br label %6, !llvm.loop !9

33:                                               ; preds = %6
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @printf(ptr noundef nonnull %0, ...) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  call void @llvm.va_start(ptr %4)
  %5 = call ptr @__acrt_iob_func(i32 noundef 1)
  %6 = load ptr, ptr %2, align 8
  %7 = load ptr, ptr %4, align 8
  %8 = call i32 @__mingw_vfprintf(ptr noundef %5, ptr noundef %6, ptr noundef %7) #7
  store i32 %8, ptr %3, align 4
  call void @llvm.va_end(ptr %4)
  %9 = load i32, ptr %3, align 4
  ret i32 %9
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_start(ptr) #3

declare dllimport ptr @__acrt_iob_func(i32 noundef) #1

; Function Attrs: nounwind
declare dso_local i32 @__mingw_vfprintf(ptr noundef, ptr noundef, ptr noundef) #4

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_end(ptr) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @execute_graph(i32 noundef %0, i32 noundef %1, i32 noundef %2, ptr noundef %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca ptr, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i32 %0, ptr %5, align 4
  store i32 %1, ptr %6, align 4
  store i32 %2, ptr %7, align 4
  store ptr %3, ptr %8, align 8
  call void @reorder_edges(ptr noundef @adj_table)
  %20 = load i32, ptr @node_count, align 4
  %21 = sext i32 %20 to i64
  %22 = mul i64 4, %21
  %23 = call ptr @malloc(i64 noundef %22) #8
  store ptr %23, ptr %9, align 8
  %24 = load ptr, ptr %9, align 8
  %25 = icmp ne ptr %24, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %4
  call void @perror(ptr noundef @.str.3)
  call void @exit(i32 noundef 1) #9
  unreachable

27:                                               ; preds = %4
  store i32 0, ptr %10, align 4
  store i32 0, ptr %11, align 4
  store i32 0, ptr %12, align 4
  %28 = load i32, ptr @node_count, align 4
  %29 = zext i32 %28 to i64
  %30 = call ptr @llvm.stacksave()
  store ptr %30, ptr %13, align 8
  %31 = alloca i8, i64 %29, align 16
  store i64 %29, ptr %14, align 8
  store i32 0, ptr %15, align 4
  br label %32

32:                                               ; preds = %40, %27
  %33 = load i32, ptr %15, align 4
  %34 = load i32, ptr @node_count, align 4
  %35 = icmp slt i32 %33, %34
  br i1 %35, label %36, label %43

36:                                               ; preds = %32
  %37 = load i32, ptr %15, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8, ptr %31, i64 %38
  store i8 0, ptr %39, align 1
  br label %40

40:                                               ; preds = %36
  %41 = load i32, ptr %15, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, ptr %15, align 4
  br label %32, !llvm.loop !10

43:                                               ; preds = %32
  %44 = load i32, ptr %5, align 4
  %45 = load ptr, ptr %9, align 8
  %46 = load i32, ptr %11, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, ptr %11, align 4
  %48 = sext i32 %46 to i64
  %49 = getelementptr inbounds i32, ptr %45, i64 %48
  store i32 %44, ptr %49, align 4
  %50 = load i32, ptr %5, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, ptr %31, i64 %51
  store i8 1, ptr %52, align 1
  br label %53

53:                                               ; preds = %128, %43
  %54 = load i32, ptr %10, align 4
  %55 = load i32, ptr %11, align 4
  %56 = icmp slt i32 %54, %55
  br i1 %56, label %57, label %129

57:                                               ; preds = %53
  %58 = load i32, ptr %11, align 4
  %59 = load i32, ptr %10, align 4
  %60 = sub nsw i32 %58, %59
  store i32 %60, ptr %16, align 4
  store i32 0, ptr %17, align 4
  br label %61

61:                                               ; preds = %125, %57
  %62 = load i32, ptr %17, align 4
  %63 = load i32, ptr %16, align 4
  %64 = icmp slt i32 %62, %63
  br i1 %64, label %65, label %128

65:                                               ; preds = %61
  %66 = load ptr, ptr %9, align 8
  %67 = load i32, ptr %10, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, ptr %10, align 4
  %69 = sext i32 %67 to i64
  %70 = getelementptr inbounds i32, ptr %66, i64 %69
  %71 = load i32, ptr %70, align 4
  store i32 %71, ptr %18, align 4
  %72 = call i32 @rand()
  %73 = srem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %85

75:                                               ; preds = %65
  %76 = load i32, ptr %7, align 4
  %77 = load i32, ptr %6, align 4
  %78 = icmp slt i32 %76, %77
  br i1 %78, label %79, label %85

79:                                               ; preds = %75
  %80 = load i32, ptr %18, align 4
  %81 = load i32, ptr %6, align 4
  %82 = load i32, ptr %7, align 4
  %83 = add nsw i32 %82, 1
  %84 = load ptr, ptr %8, align 8
  call void @execute_graph(i32 noundef %80, i32 noundef %81, i32 noundef %83, ptr noundef %84)
  br label %85

85:                                               ; preds = %79, %75, %65
  %86 = load i32, ptr %18, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [0 x ptr], ptr @nodes, i64 0, i64 %87
  %89 = load ptr, ptr %88, align 8
  call void %89()
  store i32 0, ptr %19, align 4
  br label %90

90:                                               ; preds = %121, %85
  %91 = load i32, ptr %19, align 4
  %92 = load i32, ptr @node_count, align 4
  %93 = icmp slt i32 %91, %92
  br i1 %93, label %94, label %124

94:                                               ; preds = %90
  %95 = load ptr, ptr %8, align 8
  %96 = load i32, ptr %18, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [9 x i32], ptr %95, i64 %97
  %99 = load i32, ptr %19, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [9 x i32], ptr %98, i64 0, i64 %100
  %102 = load i32, ptr %101, align 4
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %104, label %120

104:                                              ; preds = %94
  %105 = load i32, ptr %19, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, ptr %31, i64 %106
  %108 = load i8, ptr %107, align 1
  %109 = trunc i8 %108 to i1
  br i1 %109, label %120, label %110

110:                                              ; preds = %104
  %111 = load i32, ptr %19, align 4
  %112 = load ptr, ptr %9, align 8
  %113 = load i32, ptr %11, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, ptr %11, align 4
  %115 = sext i32 %113 to i64
  %116 = getelementptr inbounds i32, ptr %112, i64 %115
  store i32 %111, ptr %116, align 4
  %117 = load i32, ptr %19, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, ptr %31, i64 %118
  store i8 1, ptr %119, align 1
  br label %120

120:                                              ; preds = %110, %104, %94
  br label %121

121:                                              ; preds = %120
  %122 = load i32, ptr %19, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, ptr %19, align 4
  br label %90, !llvm.loop !11

124:                                              ; preds = %90
  br label %125

125:                                              ; preds = %124
  %126 = load i32, ptr %17, align 4
  %127 = add nsw i32 %126, 1
  store i32 %127, ptr %17, align 4
  br label %61, !llvm.loop !12

128:                                              ; preds = %61
  br label %53, !llvm.loop !13

129:                                              ; preds = %53
  %130 = load ptr, ptr %9, align 8
  call void @free(ptr noundef %130)
  %131 = load ptr, ptr %13, align 8
  call void @llvm.stackrestore(ptr %131)
  ret void
}

; Function Attrs: allocsize(0)
declare dso_local ptr @malloc(i64 noundef) #5

declare dso_local void @perror(ptr noundef) #1

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32 noundef) #6

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #3

declare dso_local void @free(ptr noundef) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @overwrite_offset(ptr noundef %0, i32 noundef %1, ptr noundef %2, i64 noundef %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca i64, align 8
  %9 = alloca ptr, align 8
  store ptr %0, ptr %5, align 8
  store i32 %1, ptr %6, align 4
  store ptr %2, ptr %7, align 8
  store i64 %3, ptr %8, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @fopen(ptr noundef %10, ptr noundef @.str.4)
  store ptr %11, ptr %9, align 8
  %12 = load ptr, ptr %9, align 8
  %13 = icmp ne ptr %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %4
  call void @perror(ptr noundef @.str.1.5)
  call void @exit(i32 noundef 1) #9
  unreachable

15:                                               ; preds = %4
  %16 = load ptr, ptr %9, align 8
  %17 = load i32, ptr %6, align 4
  %18 = call i32 @fseek(ptr noundef %16, i32 noundef %17, i32 noundef 0)
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %15
  call void @perror(ptr noundef @.str.2.6)
  %21 = load ptr, ptr %9, align 8
  %22 = call i32 @fclose(ptr noundef %21)
  call void @exit(i32 noundef 1) #9
  unreachable

23:                                               ; preds = %15
  %24 = load ptr, ptr %7, align 8
  %25 = load i64, ptr %8, align 8
  %26 = load ptr, ptr %9, align 8
  %27 = call i64 @fwrite(ptr noundef %24, i64 noundef 1, i64 noundef %25, ptr noundef %26)
  %28 = load i64, ptr %8, align 8
  %29 = icmp ne i64 %27, %28
  br i1 %29, label %30, label %33

30:                                               ; preds = %23
  call void @perror(ptr noundef @.str.3.7)
  %31 = load ptr, ptr %9, align 8
  %32 = call i32 @fclose(ptr noundef %31)
  call void @exit(i32 noundef 1) #9
  unreachable

33:                                               ; preds = %23
  %34 = load ptr, ptr %9, align 8
  %35 = call i32 @fclose(ptr noundef %34)
  ret void
}

declare dso_local ptr @fopen(ptr noundef, ptr noundef) #1

declare dso_local i32 @fseek(ptr noundef, i32 noundef, i32 noundef) #1

declare dso_local i32 @fclose(ptr noundef) #1

declare dso_local i64 @fwrite(ptr noundef, i64 noundef, i64 noundef, ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printSectionHeaders() #0 {
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i16, align 2
  %6 = call ptr @GetModuleHandleA(ptr noundef null)
  store ptr %6, ptr %1, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = icmp ne ptr %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %0
  %10 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.4.8)
  br label %70

11:                                               ; preds = %0
  %12 = load ptr, ptr %1, align 8
  store ptr %12, ptr %2, align 8
  %13 = load ptr, ptr %1, align 8
  %14 = load ptr, ptr %2, align 8
  %15 = getelementptr inbounds %struct._IMAGE_DOS_HEADER, ptr %14, i32 0, i32 18
  %16 = load i32, ptr %15, align 2
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, ptr %13, i64 %17
  store ptr %18, ptr %3, align 8
  %19 = load ptr, ptr %3, align 8
  %20 = getelementptr inbounds %struct._IMAGE_NT_HEADERS64, ptr %19, i32 0, i32 2
  %21 = load ptr, ptr %3, align 8
  %22 = getelementptr inbounds %struct._IMAGE_NT_HEADERS64, ptr %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct._IMAGE_FILE_HEADER, ptr %22, i32 0, i32 5
  %24 = load i16, ptr %23, align 4
  %25 = zext i16 %24 to i32
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, ptr %20, i64 %26
  store ptr %27, ptr %4, align 8
  %28 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.5)
  store i16 0, ptr %5, align 2
  br label %29

29:                                               ; preds = %67, %11
  %30 = load i16, ptr %5, align 2
  %31 = zext i16 %30 to i32
  %32 = load ptr, ptr %3, align 8
  %33 = getelementptr inbounds %struct._IMAGE_NT_HEADERS64, ptr %32, i32 0, i32 1
  %34 = getelementptr inbounds %struct._IMAGE_FILE_HEADER, ptr %33, i32 0, i32 1
  %35 = load i16, ptr %34, align 2
  %36 = zext i16 %35 to i32
  %37 = icmp slt i32 %31, %36
  br i1 %37, label %38, label %70

38:                                               ; preds = %29
  %39 = load ptr, ptr %4, align 8
  %40 = load i16, ptr %5, align 2
  %41 = zext i16 %40 to i64
  %42 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %39, i64 %41
  %43 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %42, i32 0, i32 0
  %44 = getelementptr inbounds [8 x i8], ptr %43, i64 0, i64 0
  %45 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.6, ptr noundef %44)
  %46 = load ptr, ptr %4, align 8
  %47 = load i16, ptr %5, align 2
  %48 = zext i16 %47 to i64
  %49 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %46, i64 %48
  %50 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %49, i32 0, i32 2
  %51 = load i32, ptr %50, align 4
  %52 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.7, i32 noundef %51)
  %53 = load ptr, ptr %4, align 8
  %54 = load i16, ptr %5, align 2
  %55 = zext i16 %54 to i64
  %56 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %53, i64 %55
  %57 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %56, i32 0, i32 3
  %58 = load i32, ptr %57, align 4
  %59 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.8, i32 noundef %58)
  %60 = load ptr, ptr %4, align 8
  %61 = load i16, ptr %5, align 2
  %62 = zext i16 %61 to i64
  %63 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %60, i64 %62
  %64 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %63, i32 0, i32 4
  %65 = load i32, ptr %64, align 4
  %66 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.9, i32 noundef %65)
  br label %67

67:                                               ; preds = %38
  %68 = load i16, ptr %5, align 2
  %69 = add i16 %68, 1
  store i16 %69, ptr %5, align 2
  br label %29, !llvm.loop !14

70:                                               ; preds = %9, %29
  ret void
}

declare dllimport ptr @GetModuleHandleA(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @printf.9(ptr noundef nonnull %0, ...) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  call void @llvm.va_start(ptr %4)
  %5 = call ptr @__acrt_iob_func(i32 noundef 1)
  %6 = load ptr, ptr %2, align 8
  %7 = load ptr, ptr %4, align 8
  %8 = call i32 @__mingw_vfprintf(ptr noundef %5, ptr noundef %6, ptr noundef %7) #7
  store i32 %8, ptr %3, align 4
  call void @llvm.va_end(ptr %4)
  %9 = load i32, ptr %3, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @Rva2Offset(i32 noundef %0, i64 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i16, align 2
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  store i32 %0, ptr %4, align 4
  store i64 %1, ptr %5, align 8
  store i16 0, ptr %6, align 2
  store ptr null, ptr %7, align 8
  store ptr null, ptr %8, align 8
  %9 = load i64, ptr %5, align 8
  %10 = load i64, ptr %5, align 8
  %11 = inttoptr i64 %10 to ptr
  %12 = getelementptr inbounds %struct._IMAGE_DOS_HEADER, ptr %11, i32 0, i32 18
  %13 = load i32, ptr %12, align 2
  %14 = sext i32 %13 to i64
  %15 = add i64 %9, %14
  %16 = inttoptr i64 %15 to ptr
  store ptr %16, ptr %8, align 8
  %17 = load ptr, ptr %8, align 8
  %18 = getelementptr inbounds %struct._IMAGE_NT_HEADERS64, ptr %17, i32 0, i32 2
  %19 = ptrtoint ptr %18 to i64
  %20 = load ptr, ptr %8, align 8
  %21 = getelementptr inbounds %struct._IMAGE_NT_HEADERS64, ptr %20, i32 0, i32 1
  %22 = getelementptr inbounds %struct._IMAGE_FILE_HEADER, ptr %21, i32 0, i32 5
  %23 = load i16, ptr %22, align 4
  %24 = zext i16 %23 to i64
  %25 = add i64 %19, %24
  %26 = inttoptr i64 %25 to ptr
  store ptr %26, ptr %7, align 8
  %27 = load i32, ptr %4, align 4
  %28 = load ptr, ptr %7, align 8
  %29 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %28, i64 0
  %30 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %29, i32 0, i32 4
  %31 = load i32, ptr %30, align 4
  %32 = icmp ult i32 %27, %31
  br i1 %32, label %33, label %35

33:                                               ; preds = %2
  %34 = load i32, ptr %4, align 4
  store i32 %34, ptr %3, align 4
  br label %91

35:                                               ; preds = %2
  store i16 0, ptr %6, align 2
  br label %36

36:                                               ; preds = %87, %35
  %37 = load i16, ptr %6, align 2
  %38 = zext i16 %37 to i32
  %39 = load ptr, ptr %8, align 8
  %40 = getelementptr inbounds %struct._IMAGE_NT_HEADERS64, ptr %39, i32 0, i32 1
  %41 = getelementptr inbounds %struct._IMAGE_FILE_HEADER, ptr %40, i32 0, i32 1
  %42 = load i16, ptr %41, align 2
  %43 = zext i16 %42 to i32
  %44 = icmp slt i32 %38, %43
  br i1 %44, label %45, label %90

45:                                               ; preds = %36
  %46 = load i32, ptr %4, align 4
  %47 = load ptr, ptr %7, align 8
  %48 = load i16, ptr %6, align 2
  %49 = zext i16 %48 to i64
  %50 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %47, i64 %49
  %51 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %50, i32 0, i32 2
  %52 = load i32, ptr %51, align 4
  %53 = icmp uge i32 %46, %52
  br i1 %53, label %54, label %86

54:                                               ; preds = %45
  %55 = load i32, ptr %4, align 4
  %56 = load ptr, ptr %7, align 8
  %57 = load i16, ptr %6, align 2
  %58 = zext i16 %57 to i64
  %59 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %56, i64 %58
  %60 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %59, i32 0, i32 2
  %61 = load i32, ptr %60, align 4
  %62 = load ptr, ptr %7, align 8
  %63 = load i16, ptr %6, align 2
  %64 = zext i16 %63 to i64
  %65 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %62, i64 %64
  %66 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %65, i32 0, i32 3
  %67 = load i32, ptr %66, align 4
  %68 = add i32 %61, %67
  %69 = icmp ult i32 %55, %68
  br i1 %69, label %70, label %86

70:                                               ; preds = %54
  %71 = load i32, ptr %4, align 4
  %72 = load ptr, ptr %7, align 8
  %73 = load i16, ptr %6, align 2
  %74 = zext i16 %73 to i64
  %75 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %72, i64 %74
  %76 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %75, i32 0, i32 2
  %77 = load i32, ptr %76, align 4
  %78 = sub i32 %71, %77
  %79 = load ptr, ptr %7, align 8
  %80 = load i16, ptr %6, align 2
  %81 = zext i16 %80 to i64
  %82 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %79, i64 %81
  %83 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %82, i32 0, i32 4
  %84 = load i32, ptr %83, align 4
  %85 = add i32 %78, %84
  store i32 %85, ptr %3, align 4
  br label %91

86:                                               ; preds = %54, %45
  br label %87

87:                                               ; preds = %86
  %88 = load i16, ptr %6, align 2
  %89 = add i16 %88, 1
  store i16 %89, ptr %6, align 2
  br label %36, !llvm.loop !15

90:                                               ; preds = %36
  store i32 0, ptr %3, align 4
  br label %91

91:                                               ; preds = %90, %70, %33
  %92 = load i32, ptr %3, align 4
  ret i32 %92
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @analyzeExecutable(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca i64, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca ptr, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store ptr %0, ptr %3, align 8
  %15 = call ptr @GetModuleHandleA(ptr noundef null)
  %16 = ptrtoint ptr %15 to i64
  store i64 %16, ptr %4, align 8
  %17 = load i64, ptr %4, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %1
  %20 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.4.8)
  store ptr null, ptr %2, align 8
  br label %110

21:                                               ; preds = %1
  %22 = load i64, ptr %4, align 8
  %23 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.10, i64 noundef %22)
  %24 = load i64, ptr %4, align 8
  %25 = inttoptr i64 %24 to ptr
  store ptr %25, ptr %5, align 8
  %26 = load i64, ptr %4, align 8
  %27 = load ptr, ptr %5, align 8
  %28 = getelementptr inbounds %struct._IMAGE_DOS_HEADER, ptr %27, i32 0, i32 18
  %29 = load i32, ptr %28, align 2
  %30 = sext i32 %29 to i64
  %31 = add i64 %26, %30
  %32 = inttoptr i64 %31 to ptr
  store ptr %32, ptr %6, align 8
  %33 = load ptr, ptr %6, align 8
  %34 = getelementptr inbounds %struct._IMAGE_NT_HEADERS64, ptr %33, i32 0, i32 2
  store ptr %34, ptr %7, align 8
  %35 = load ptr, ptr %5, align 8
  %36 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.11, ptr noundef %35)
  %37 = load ptr, ptr %6, align 8
  %38 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.12, ptr noundef %37)
  %39 = load ptr, ptr %7, align 8
  %40 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.13, ptr noundef %39)
  %41 = load ptr, ptr %7, align 8
  %42 = getelementptr inbounds %struct._IMAGE_OPTIONAL_HEADER64, ptr %41, i32 0, i32 8
  %43 = load i64, ptr %42, align 4
  %44 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.14, i64 noundef %43)
  %45 = load ptr, ptr %6, align 8
  %46 = getelementptr inbounds %struct._IMAGE_NT_HEADERS64, ptr %45, i32 0, i32 2
  %47 = ptrtoint ptr %46 to i64
  %48 = load ptr, ptr %6, align 8
  %49 = getelementptr inbounds %struct._IMAGE_NT_HEADERS64, ptr %48, i32 0, i32 1
  %50 = getelementptr inbounds %struct._IMAGE_FILE_HEADER, ptr %49, i32 0, i32 5
  %51 = load i16, ptr %50, align 4
  %52 = zext i16 %51 to i64
  %53 = add i64 %47, %52
  %54 = inttoptr i64 %53 to ptr
  store ptr %54, ptr %8, align 8
  store i64 0, ptr %9, align 8
  store i32 0, ptr %10, align 4
  store i32 0, ptr %11, align 4
  br label %55

55:                                               ; preds = %87, %21
  %56 = load i32, ptr %11, align 4
  %57 = load ptr, ptr %6, align 8
  %58 = getelementptr inbounds %struct._IMAGE_NT_HEADERS64, ptr %57, i32 0, i32 1
  %59 = getelementptr inbounds %struct._IMAGE_FILE_HEADER, ptr %58, i32 0, i32 1
  %60 = load i16, ptr %59, align 2
  %61 = zext i16 %60 to i32
  %62 = icmp slt i32 %56, %61
  br i1 %62, label %63, label %90

63:                                               ; preds = %55
  %64 = load ptr, ptr %8, align 8
  %65 = load i32, ptr %11, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %64, i64 %66
  %68 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %67, i32 0, i32 0
  %69 = getelementptr inbounds [8 x i8], ptr %68, i64 0, i64 0
  %70 = call i32 @strncmp(ptr noundef %69, ptr noundef @.str.15, i64 noundef 5)
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %86

72:                                               ; preds = %63
  %73 = load ptr, ptr %8, align 8
  %74 = load i32, ptr %11, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %73, i64 %75
  %77 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %76, i32 0, i32 2
  %78 = load i32, ptr %77, align 4
  %79 = zext i32 %78 to i64
  store i64 %79, ptr %9, align 8
  %80 = load ptr, ptr %8, align 8
  %81 = load i32, ptr %11, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %80, i64 %82
  %84 = getelementptr inbounds %struct._IMAGE_SECTION_HEADER, ptr %83, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  store i32 %85, ptr %10, align 4
  br label %90

86:                                               ; preds = %63
  br label %87

87:                                               ; preds = %86
  %88 = load i32, ptr %11, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, ptr %11, align 4
  br label %55, !llvm.loop !16

90:                                               ; preds = %72, %55
  %91 = load i64, ptr %9, align 8
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %90
  %94 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.16)
  store ptr null, ptr %2, align 8
  br label %110

95:                                               ; preds = %90
  %96 = load i64, ptr %9, align 8
  %97 = load i32, ptr %10, align 4
  %98 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.17, i64 noundef %96, i32 noundef %97)
  %99 = call ptr @malloc(i64 noundef 4096) #8
  store ptr %99, ptr %12, align 8
  store i64 0, ptr %13, align 8
  %100 = load i64, ptr %9, align 8
  %101 = add i64 %100, 2512
  %102 = trunc i64 %101 to i32
  %103 = load i64, ptr %4, align 8
  %104 = call i32 @Rva2Offset(i32 noundef %102, i64 noundef %103)
  %105 = zext i32 %104 to i64
  store i64 %105, ptr %14, align 8
  %106 = load i64, ptr %14, align 8
  %107 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.18, i64 noundef %106)
  %108 = load i64, ptr %13, align 8
  %109 = load ptr, ptr %3, align 8
  store i64 %108, ptr %109, align 8
  store ptr null, ptr %2, align 8
  br label %110

110:                                              ; preds = %95, %93, %19
  %111 = load ptr, ptr %2, align 8
  ret ptr %111
}

declare dso_local i32 @strncmp(ptr noundef, ptr noundef, i64 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @decrypt_function(ptr noundef %0, i64 noundef %1) #0 {
  %3 = alloca ptr, align 8
  %4 = alloca i64, align 8
  store ptr %0, ptr %3, align 8
  store i64 %1, ptr %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @encrypt_function(ptr noundef %0, i64 noundef %1) #0 {
  %3 = alloca ptr, align 8
  %4 = alloca i64, align 8
  store ptr %0, ptr %3, align 8
  store i64 %1, ptr %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  store i32 0, ptr %1, align 4
  %3 = call i32 (ptr, ...) @printf.20(ptr noundef @.str.19)
  %4 = call i32 (ptr, ...) @printf.20(ptr noundef @.str.1.21)
  store i64 9, ptr %2, align 8
  %5 = call ptr @analyzeExecutable(ptr noundef %2)
  %6 = call i32 (ptr, ...) @printf.20(ptr noundef @.str.2.22)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @printf.20(ptr noundef nonnull %0, ...) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  call void @llvm.va_start(ptr %4)
  %5 = call ptr @__acrt_iob_func(i32 noundef 1)
  %6 = load ptr, ptr %2, align 8
  %7 = load ptr, ptr %4, align 8
  %8 = call i32 @__mingw_vfprintf(ptr noundef %5, ptr noundef %6, ptr noundef %7) #7
  store i32 %8, ptr %3, align 4
  call void @llvm.va_end(ptr %4)
  %9 = load i32, ptr %3, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_0() #0 {
  %1 = call i32 (ptr, ...) @printf.30(ptr noundef @.str.38)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_1() #0 {
  %1 = call i32 (ptr, ...) @printf.30(ptr noundef @.str.3.37)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_2() #0 {
  %1 = call i32 (ptr, ...) @printf.30(ptr noundef @.str.4.36)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_3() #0 {
  %1 = call i32 (ptr, ...) @printf.30(ptr noundef @.str.5.35)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_4() #0 {
  %1 = call i32 (ptr, ...) @printf.30(ptr noundef @.str.6.34)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_5() #0 {
  %1 = call i32 (ptr, ...) @printf.30(ptr noundef @.str.7.33)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_6() #0 {
  %1 = call i32 (ptr, ...) @printf.30(ptr noundef @.str.8.32)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_7() #0 {
  %1 = call i32 (ptr, ...) @printf.30(ptr noundef @.str.9.31)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_8() #0 {
  %1 = call i32 (ptr, ...) @printf.30(ptr noundef @.str.10.29)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @printf.30(ptr noundef nonnull %0, ...) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  call void @llvm.va_start(ptr %4)
  %5 = call ptr @__acrt_iob_func(i32 noundef 1)
  %6 = load ptr, ptr %2, align 8
  %7 = load ptr, ptr %4, align 8
  %8 = call i32 @__mingw_vfprintf(ptr noundef %5, ptr noundef %6, ptr noundef %7) #7
  store i32 %8, ptr %3, align 4
  call void @llvm.va_end(ptr %4)
  %9 = load i32, ptr %3, align 4
  ret i32 %9
}

attributes #0 = { noinline nounwind optnone uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #3 = { nocallback nofree nosync nounwind willreturn }
attributes #4 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { allocsize(0) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind }
attributes #8 = { allocsize(0) }
attributes #9 = { noreturn nounwind }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3}

!0 = !{!"Debian clang version 16.0.6 (27+b1)"}
!1 = !{i32 1, !"wchar_size", i32 2}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.mustprogress"}
!6 = distinct !{!6, !5}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !5}
!11 = distinct !{!11, !5}
!12 = distinct !{!12, !5}
!13 = distinct !{!13, !5}
!14 = distinct !{!14, !5}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !5}
