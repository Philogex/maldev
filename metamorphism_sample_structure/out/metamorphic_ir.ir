; ModuleID = '/home/kali/Desktop/maldev/metamorphism_sample_structure/build/out/main_pass.bc'
source_filename = "llvm-link"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-w64-windows-gnu"

@.str = private unnamed_addr constant [30 x i8] c"Connected node %d to node %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"Adjacency Matrix:\0A\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4 = private unnamed_addr constant [38 x i8] c"Reordering Local Edges for Depth: %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"Queue allocation failed\00", align 1
@.str.6 = private unnamed_addr constant [60 x i8] c"Recursively calling execute_graph from node %d at depth %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [32 x i8] c"Executing node: %d at Depth %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [50 x i8] c"Executing graph from Node 0 with max depth of 3:\0A\00", align 1
@llvm.global.annotations = appending global [9 x { ptr, ptr, ptr, i32, ptr }] [{ ptr, ptr, ptr, i32, ptr } { ptr @node_0, ptr @.str.1.24, ptr @.str.2.25, i32 14, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_1, ptr @.str.1.24, ptr @.str.2.25, i32 19, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_2, ptr @.str.1.24, ptr @.str.2.25, i32 24, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_3, ptr @.str.1.24, ptr @.str.2.25, i32 29, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_4, ptr @.str.1.24, ptr @.str.2.25, i32 34, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_5, ptr @.str.1.24, ptr @.str.2.25, i32 39, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_6, ptr @.str.1.24, ptr @.str.2.25, i32 44, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_7, ptr @.str.1.24, ptr @.str.2.25, i32 49, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @node_8, ptr @.str.1.24, ptr @.str.2.25, i32 54, ptr null }], section "llvm.metadata"
@adj_table = dso_local global [9 x [9 x i32]] zeroinitializer, align 16
@node_count = dso_local global i32 9, align 4
@.str.23 = private unnamed_addr constant [20 x i8] c"Hello from Node 0!\0A\00", align 1
@.str.1.24 = private unnamed_addr constant [8 x i8] c"encrypt\00", section "llvm.metadata"
@.str.2.25 = private unnamed_addr constant [83 x i8] c"/home/kali/Desktop/maldev/metamorphism_sample_structure/src/data/adjacency_table.c\00", section "llvm.metadata"
@.str.3.22 = private unnamed_addr constant [20 x i8] c"Hello from Node 1!\0A\00", align 1
@.str.4.21 = private unnamed_addr constant [20 x i8] c"Hello from Node 2!\0A\00", align 1
@.str.5.20 = private unnamed_addr constant [20 x i8] c"Hello from Node 3!\0A\00", align 1
@.str.6.19 = private unnamed_addr constant [20 x i8] c"Hello from Node 4!\0A\00", align 1
@.str.7.18 = private unnamed_addr constant [20 x i8] c"Hello from Node 5!\0A\00", align 1
@.str.8.17 = private unnamed_addr constant [20 x i8] c"Hello from Node 6!\0A\00", align 1
@.str.9 = private unnamed_addr constant [20 x i8] c"Hello from Node 7!\0A\00", align 1
@.str.10 = private unnamed_addr constant [20 x i8] c"Hello from Node 8!\0A\00", align 1
@nodes = dso_local global [9 x ptr] [ptr @node_0, ptr @node_1, ptr @node_2, ptr @node_3, ptr @node_4, ptr @node_5, ptr @node_6, ptr @node_7, ptr @node_8], align 16
@prng_seed = dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @reorder_edges(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca [9 x i32], align 16
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store ptr %0, ptr %2, align 8
  %7 = load i32, ptr @prng_seed, align 4
  call void @srand(i32 noundef %7)
  call void @llvm.memset.p0.i64(ptr align 16 %3, i8 0, i64 36, i1 false)
  store i32 1, ptr %4, align 4
  %8 = getelementptr inbounds [9 x i32], ptr %3, i64 0, i64 0
  store i32 1, ptr %8, align 16
  br label %9

9:                                                ; preds = %41, %1
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr @node_count, align 4
  %12 = icmp slt i32 %10, %11
  br i1 %12, label %13, label %57

13:                                               ; preds = %9
  %14 = call i32 @rand()
  %15 = load i32, ptr @node_count, align 4
  %16 = srem i32 %14, %15
  store i32 %16, ptr %5, align 4
  br label %17

17:                                               ; preds = %23, %13
  %18 = load i32, ptr %5, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [9 x i32], ptr %3, i64 0, i64 %19
  %21 = load i32, ptr %20, align 4
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %27

23:                                               ; preds = %17
  %24 = call i32 @rand()
  %25 = load i32, ptr @node_count, align 4
  %26 = srem i32 %24, %25
  store i32 %26, ptr %5, align 4
  br label %17, !llvm.loop !4

27:                                               ; preds = %17
  %28 = call i32 @rand()
  %29 = load i32, ptr @node_count, align 4
  %30 = srem i32 %28, %29
  store i32 %30, ptr %6, align 4
  br label %31

31:                                               ; preds = %37, %27
  %32 = load i32, ptr %6, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [9 x i32], ptr %3, i64 0, i64 %33
  %35 = load i32, ptr %34, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %31
  %38 = call i32 @rand()
  %39 = load i32, ptr @node_count, align 4
  %40 = srem i32 %38, %39
  store i32 %40, ptr %6, align 4
  br label %31, !llvm.loop !6

41:                                               ; preds = %31
  %42 = load ptr, ptr %2, align 8
  %43 = load i32, ptr %6, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [9 x [9 x i32]], ptr %42, i64 0, i64 %44
  %46 = load i32, ptr %5, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [9 x i32], ptr %45, i64 0, i64 %47
  store i32 1, ptr %48, align 4
  %49 = load i32, ptr %5, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [9 x i32], ptr %3, i64 0, i64 %50
  store i32 1, ptr %51, align 4
  %52 = load i32, ptr %4, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, ptr %4, align 4
  %54 = load i32, ptr %5, align 4
  %55 = load i32, ptr %6, align 4
  %56 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %54, i32 noundef %55)
  br label %9, !llvm.loop !7

57:                                               ; preds = %9
  ret void
}

declare dso_local void @srand(i32 noundef) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @rand() #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @printf(ptr noundef nonnull %0, ...) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  call void @llvm.va_start(ptr %4)
  %5 = call ptr @__acrt_iob_func(i32 noundef 1)
  %6 = load ptr, ptr %2, align 8
  %7 = load ptr, ptr %4, align 8
  %8 = call i32 @__mingw_vfprintf(ptr noundef %5, ptr noundef %6, ptr noundef %7) #7
  store i32 %8, ptr %3, align 4
  call void @llvm.va_end(ptr %4)
  %9 = load i32, ptr %3, align 4
  ret i32 %9
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_start(ptr) #3

declare dllimport ptr @__acrt_iob_func(i32 noundef) #1

; Function Attrs: nounwind
declare dso_local i32 @__mingw_vfprintf(ptr noundef, ptr noundef, ptr noundef) #4

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_end(ptr) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_adj_table(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store ptr %0, ptr %2, align 8
  %5 = call i32 (ptr, ...) @printf(ptr noundef @.str.1)
  store i32 0, ptr %3, align 4
  br label %6

6:                                                ; preds = %30, %1
  %7 = load i32, ptr %3, align 4
  %8 = load i32, ptr @node_count, align 4
  %9 = icmp slt i32 %7, %8
  br i1 %9, label %10, label %33

10:                                               ; preds = %6
  store i32 0, ptr %4, align 4
  br label %11

11:                                               ; preds = %25, %10
  %12 = load i32, ptr %4, align 4
  %13 = load i32, ptr @node_count, align 4
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %15, label %28

15:                                               ; preds = %11
  %16 = load ptr, ptr %2, align 8
  %17 = load i32, ptr %3, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [9 x i32], ptr %16, i64 %18
  %20 = load i32, ptr %4, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [9 x i32], ptr %19, i64 0, i64 %21
  %23 = load i32, ptr %22, align 4
  %24 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %23)
  br label %25

25:                                               ; preds = %15
  %26 = load i32, ptr %4, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, ptr %4, align 4
  br label %11, !llvm.loop !8

28:                                               ; preds = %11
  %29 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  br label %30

30:                                               ; preds = %28
  %31 = load i32, ptr %3, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, ptr %3, align 4
  br label %6, !llvm.loop !9

33:                                               ; preds = %6
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @execute_graph(i32 noundef %0, i32 noundef %1, i32 noundef %2, ptr noundef %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca ptr, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i32 %0, ptr %5, align 4
  store i32 %1, ptr %6, align 4
  store i32 %2, ptr %7, align 4
  store ptr %3, ptr %8, align 8
  %20 = load i32, ptr %7, align 4
  %21 = call i32 (ptr, ...) @printf(ptr noundef @.str.4, i32 noundef %20)
  call void @reorder_edges(ptr noundef @adj_table)
  %22 = load i32, ptr @node_count, align 4
  %23 = sext i32 %22 to i64
  %24 = mul i64 4, %23
  %25 = call ptr @malloc(i64 noundef %24) #8
  store ptr %25, ptr %9, align 8
  %26 = load ptr, ptr %9, align 8
  %27 = icmp ne ptr %26, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %4
  call void @perror(ptr noundef @.str.5)
  call void @exit(i32 noundef 1) #9
  unreachable

29:                                               ; preds = %4
  store i32 0, ptr %10, align 4
  store i32 0, ptr %11, align 4
  store i32 0, ptr %12, align 4
  %30 = load i32, ptr @node_count, align 4
  %31 = zext i32 %30 to i64
  %32 = call ptr @llvm.stacksave()
  store ptr %32, ptr %13, align 8
  %33 = alloca i8, i64 %31, align 16
  store i64 %31, ptr %14, align 8
  store i32 0, ptr %15, align 4
  br label %34

34:                                               ; preds = %42, %29
  %35 = load i32, ptr %15, align 4
  %36 = load i32, ptr @node_count, align 4
  %37 = icmp slt i32 %35, %36
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = load i32, ptr %15, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, ptr %33, i64 %40
  store i8 0, ptr %41, align 1
  br label %42

42:                                               ; preds = %38
  %43 = load i32, ptr %15, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, ptr %15, align 4
  br label %34, !llvm.loop !10

45:                                               ; preds = %34
  %46 = load i32, ptr %5, align 4
  %47 = load ptr, ptr %9, align 8
  %48 = load i32, ptr %11, align 4
  %49 = add nsw i32 %48, 1
  store i32 %49, ptr %11, align 4
  %50 = sext i32 %48 to i64
  %51 = getelementptr inbounds i32, ptr %47, i64 %50
  store i32 %46, ptr %51, align 4
  %52 = load i32, ptr %5, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, ptr %33, i64 %53
  store i8 1, ptr %54, align 1
  br label %55

55:                                               ; preds = %136, %45
  %56 = load i32, ptr %10, align 4
  %57 = load i32, ptr %11, align 4
  %58 = icmp slt i32 %56, %57
  br i1 %58, label %59, label %137

59:                                               ; preds = %55
  %60 = load i32, ptr %11, align 4
  %61 = load i32, ptr %10, align 4
  %62 = sub nsw i32 %60, %61
  store i32 %62, ptr %16, align 4
  store i32 0, ptr %17, align 4
  br label %63

63:                                               ; preds = %133, %59
  %64 = load i32, ptr %17, align 4
  %65 = load i32, ptr %16, align 4
  %66 = icmp slt i32 %64, %65
  br i1 %66, label %67, label %136

67:                                               ; preds = %63
  %68 = load ptr, ptr %9, align 8
  %69 = load i32, ptr %10, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, ptr %10, align 4
  %71 = sext i32 %69 to i64
  %72 = getelementptr inbounds i32, ptr %68, i64 %71
  %73 = load i32, ptr %72, align 4
  store i32 %73, ptr %18, align 4
  %74 = call i32 @rand()
  %75 = srem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %90

77:                                               ; preds = %67
  %78 = load i32, ptr %7, align 4
  %79 = load i32, ptr %6, align 4
  %80 = icmp slt i32 %78, %79
  br i1 %80, label %81, label %90

81:                                               ; preds = %77
  %82 = load i32, ptr %5, align 4
  %83 = load i32, ptr %7, align 4
  %84 = call i32 (ptr, ...) @printf(ptr noundef @.str.6, i32 noundef %82, i32 noundef %83)
  %85 = load i32, ptr %18, align 4
  %86 = load i32, ptr %6, align 4
  %87 = load i32, ptr %7, align 4
  %88 = add nsw i32 %87, 1
  %89 = load ptr, ptr %8, align 8
  call void @execute_graph(i32 noundef %85, i32 noundef %86, i32 noundef %88, ptr noundef %89)
  br label %90

90:                                               ; preds = %81, %77, %67
  %91 = load i32, ptr %18, align 4
  %92 = load i32, ptr %7, align 4
  %93 = call i32 (ptr, ...) @printf(ptr noundef @.str.7, i32 noundef %91, i32 noundef %92)
  %94 = load i32, ptr %18, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [0 x ptr], ptr @nodes, i64 0, i64 %95
  %97 = load ptr, ptr %96, align 8
  call void %97()
  store i32 0, ptr %19, align 4
  br label %98

98:                                               ; preds = %129, %90
  %99 = load i32, ptr %19, align 4
  %100 = load i32, ptr @node_count, align 4
  %101 = icmp slt i32 %99, %100
  br i1 %101, label %102, label %132

102:                                              ; preds = %98
  %103 = load ptr, ptr %8, align 8
  %104 = load i32, ptr %18, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds [9 x i32], ptr %103, i64 %105
  %107 = load i32, ptr %19, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [9 x i32], ptr %106, i64 0, i64 %108
  %110 = load i32, ptr %109, align 4
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %112, label %128

112:                                              ; preds = %102
  %113 = load i32, ptr %19, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, ptr %33, i64 %114
  %116 = load i8, ptr %115, align 1
  %117 = trunc i8 %116 to i1
  br i1 %117, label %128, label %118

118:                                              ; preds = %112
  %119 = load i32, ptr %19, align 4
  %120 = load ptr, ptr %9, align 8
  %121 = load i32, ptr %11, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, ptr %11, align 4
  %123 = sext i32 %121 to i64
  %124 = getelementptr inbounds i32, ptr %120, i64 %123
  store i32 %119, ptr %124, align 4
  %125 = load i32, ptr %19, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i8, ptr %33, i64 %126
  store i8 1, ptr %127, align 1
  br label %128

128:                                              ; preds = %118, %112, %102
  br label %129

129:                                              ; preds = %128
  %130 = load i32, ptr %19, align 4
  %131 = add nsw i32 %130, 1
  store i32 %131, ptr %19, align 4
  br label %98, !llvm.loop !11

132:                                              ; preds = %98
  br label %133

133:                                              ; preds = %132
  %134 = load i32, ptr %17, align 4
  %135 = add nsw i32 %134, 1
  store i32 %135, ptr %17, align 4
  br label %63, !llvm.loop !12

136:                                              ; preds = %63
  br label %55, !llvm.loop !13

137:                                              ; preds = %55
  %138 = load ptr, ptr %9, align 8
  call void @free(ptr noundef %138)
  %139 = load ptr, ptr %13, align 8
  call void @llvm.stackrestore(ptr %139)
  ret void
}

; Function Attrs: allocsize(0)
declare dso_local ptr @malloc(i64 noundef) #5

declare dso_local void @perror(ptr noundef) #1

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32 noundef) #6

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #3

declare dso_local void @free(ptr noundef) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @decrypt_function(ptr noundef %0, i64 noundef %1) #0 {
  %3 = alloca ptr, align 8
  %4 = alloca i64, align 8
  store ptr %0, ptr %3, align 8
  store i64 %1, ptr %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @encrypt_function(ptr noundef %0, i64 noundef %1) #0 {
  %3 = alloca ptr, align 8
  %4 = alloca i64, align 8
  store ptr %0, ptr %3, align 8
  store i64 %1, ptr %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  %2 = call i32 (ptr, ...) @printf.9(ptr noundef @.str.8)
  call void @execute_graph(i32 noundef 0, i32 noundef 2, i32 noundef 0, ptr noundef @adj_table)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @printf.9(ptr noundef nonnull %0, ...) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  call void @llvm.va_start(ptr %4)
  %5 = call ptr @__acrt_iob_func(i32 noundef 1)
  %6 = load ptr, ptr %2, align 8
  %7 = load ptr, ptr %4, align 8
  %8 = call i32 @__mingw_vfprintf(ptr noundef %5, ptr noundef %6, ptr noundef %7) #7
  store i32 %8, ptr %3, align 4
  call void @llvm.va_end(ptr %4)
  %9 = load i32, ptr %3, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_0() #0 {
  %1 = call i32 (ptr, ...) @printf.16(ptr noundef @.str.23)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_1() #0 {
  %1 = call i32 (ptr, ...) @printf.16(ptr noundef @.str.3.22)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_2() #0 {
  %1 = call i32 (ptr, ...) @printf.16(ptr noundef @.str.4.21)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_3() #0 {
  %1 = call i32 (ptr, ...) @printf.16(ptr noundef @.str.5.20)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_4() #0 {
  %1 = call i32 (ptr, ...) @printf.16(ptr noundef @.str.6.19)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_5() #0 {
  %1 = call i32 (ptr, ...) @printf.16(ptr noundef @.str.7.18)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_6() #0 {
  %1 = call i32 (ptr, ...) @printf.16(ptr noundef @.str.8.17)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_7() #0 {
  %1 = call i32 (ptr, ...) @printf.16(ptr noundef @.str.9)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @node_8() #0 {
  %1 = call i32 (ptr, ...) @printf.16(ptr noundef @.str.10)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @printf.16(ptr noundef nonnull %0, ...) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  call void @llvm.va_start(ptr %4)
  %5 = call ptr @__acrt_iob_func(i32 noundef 1)
  %6 = load ptr, ptr %2, align 8
  %7 = load ptr, ptr %4, align 8
  %8 = call i32 @__mingw_vfprintf(ptr noundef %5, ptr noundef %6, ptr noundef %7) #7
  store i32 %8, ptr %3, align 4
  call void @llvm.va_end(ptr %4)
  %9 = load i32, ptr %3, align 4
  ret i32 %9
}

attributes #0 = { noinline nounwind optnone uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #3 = { nocallback nofree nosync nounwind willreturn }
attributes #4 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { allocsize(0) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind }
attributes #8 = { allocsize(0) }
attributes #9 = { noreturn nounwind }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3}

!0 = !{!"Debian clang version 16.0.6 (27+b1)"}
!1 = !{i32 1, !"wchar_size", i32 2}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.mustprogress"}
!6 = distinct !{!6, !5}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !5}
!11 = distinct !{!11, !5}
!12 = distinct !{!12, !5}
!13 = distinct !{!13, !5}
